data = [
  0x2d, 0xf8, 0x01, 0x81, 0x6d, 0x94, 0x3d, 0x86, 0xf1, 0x80, 0xa9, 0x1f, 
  0xca, 0x33, 0x08, 0x56, 0x81, 0xc5, 0x2f, 0x53, 0xe9, 0x5f, 0x33, 0xbe, 
  0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8d, 0x8b, 0xde, 0xd0, 
  0x34, 0x1e, 0x55, 0x2f, 0xca, 0x92, 0x62, 0xfd, 0x6b, 0x4e, 0x24, 0x89, 
  0x6e, 0x0b, 0xef, 0x8a, 0x42, 0x9a, 0x1a, 0x50, 0x9d, 0xff, 0xd1, 0xb4, 
  0xb5, 0xcc, 0xa1, 0x70, 0xe6, 0xb0, 0x69, 0xb8, 0x22, 0x5b, 0x7b, 0x41, 
  0xae, 0xe3, 0x82, 0x4f, 0xdc, 0xaf, 0x05, 0xee, 0xfe, 0x47, 0x71, 0x4c, 
  0x96, 0x4a, 0xfa, 0x21, 0x53, 0x85, 0xcf, 0xc8, 0xa2, 0xc0, 0x03, 0x73, 
  0x30, 0x80, 0xbe, 0x72, 0xf9, 0xc5, 0xd3, 0xfb, 0x7d, 0x25, 0x14, 0xb3, 
  0xba, 0xf1, 0x12, 0x11, 0xc1, 0x19, 0xa0, 0x98, 0x7f, 0x5d, 0x90, 0xbc, 
  0xaa, 0x5a, 0x09, 0xe5, 0x06, 0x2d, 0x6f, 0xac, 0x39, 0x0e, 0xda, 0x23, 
  0x2a, 0x27, 0x01, 0x84, 0x91, 0x29, 0x0c, 0xb6, 0x3d, 0xe8, 0xce, 0xc7, 
  0xab, 0xf3, 0x59, 0x66, 0x28, 0x1f, 0x78, 0x51, 0x07, 0x32, 0x00, 0x88, 
  0xf7, 0x60, 0xd8, 0xec, 0xd4, 0x4d, 0x8e, 0x9b, 0x1d, 0x1c, 0x35, 0x7c, 
  0x97, 0x61, 0x3e, 0x46, 0xd9, 0xeb, 0xe2, 0xa8, 0x36, 0x3c, 0x94, 0x86, 
  0x44, 0x99, 0x52, 0xdd, 0x8c, 0x37, 0x7a, 0xf5, 0xf8, 0x5e, 0xdb, 0x75, 
  0xea, 0xfc, 0x4b, 0xdf, 0xd2, 0x45, 0x3b, 0x17, 0xc2, 0xa3, 0x2c, 0x13, 
  0x40, 0x7e, 0x56, 0x08, 0x87, 0x33, 0x81, 0x93, 0x9f, 0x31, 0xbd, 0x2b, 
  0x48, 0x0a, 0x10, 0x65, 0x9e, 0x64, 0x1b, 0x04, 0xf0, 0xc6, 0xed, 0xa4, 
  0x79, 0xa9, 0xe7, 0x9c, 0xa7, 0x5f, 0xf4, 0x3a, 0x26, 0x20, 0x16, 0x38, 
  0x6a, 0xcd, 0x76, 0xc3, 0x43, 0xe4, 0x49, 0xf2, 0xcb, 0xd7, 0x6d, 0x68, 
  0xe0, 0x0f, 0xa6, 0xe9, 0x58, 0x77, 0xb9, 0x74, 0x02, 0xc9, 0xd5, 0x2e, 
  0xb1, 0xd6, 0xe1, 0x95, 0x18, 0x67, 0x3f, 0x0d, 0x57, 0xad, 0x15, 0x8f, 
  0x83, 0x63, 0xbf, 0xbb, 0xf6, 0xb7, 0x54, 0x5c, 0xc4, 0xb2, 0x6c, 0xa5, 
  0x45, 0x67, 0xec, 0xbe, 0xc5, 0xde, 0x6d, 0x23, 0xe6, 0xdb, 0xf9, 0xe3, 
  0xa0, 0x7e, 0x7a, 0x5e, 0x41, 0xe9, 0x1f, 0x17, 0x29, 0xc7, 0x84, 0xf3, 
  0x1c, 0xd1, 0xf2, 0x3f, 0xae, 0x65, 0x0c, 0x1d, 0xe0, 0xe8, 0x6b, 0x00, 
  0xed, 0x18, 0x31, 0x55, 0x5d, 0x95, 0xa5, 0x5a, 0xe1, 0x51, 0xd5, 0xb5, 
  0x0e, 0x50, 0xb9, 0xd9, 0x9f, 0xf7, 0x32, 0xc3, 0xd4, 0xef, 0xa9, 0x62, 
  0x98, 0x9c, 0xc1, 0x72, 0xbb, 0xea, 0x60, 0x38, 0xd7, 0x3e, 0x01, 0x2b, 
  0x27, 0xa2, 0x99, 0x86, 0xbd, 0x61, 0xb7, 0x7b, 0xa7, 0xcc, 0xf4, 0xaa, 
  0xc8, 0x36, 0x9a, 0x4e, 0x3b, 0x52, 0x0f, 0x16, 0xd8, 0x9e, 0xdc, 0x48, 
  0xc0, 0x2a, 0x39, 0x44, 0xc9, 0xc4, 0x14, 0x6f, 0x64, 0x02, 0xcf, 0x57, 
  0xf5, 0xc6, 0x85, 0x2e, 0x75, 0xe4, 0x08, 0x63, 0x2c, 0xaf, 0x59, 0xcb, 
  0x47, 0x7d, 0x79, 0x78, 0xc2, 0x8c, 0xce, 0x10, 0x49, 0x87, 0x26, 0x4b, 
  0x8e, 0x77, 0x94, 0x03, 0xf6, 0x97, 0x4d, 0x35, 0x83, 0x0a, 0x1e, 0x71, 
  0xf0, 0x3a, 0x53, 0x5f, 0xe7, 0x15, 0x69, 0x90, 0xcd, 0x68, 0x04, 0x81, 
  0x9d, 0xfb, 0x42, 0x22, 0x24, 0xa8, 0x2f, 0x82, 0xb4, 0xab, 0x1b, 0x19, 
  0x28, 0x07, 0xad, 0x74, 0x30, 0x8d, 0xb2, 0xe5, 0xca, 0xfc, 0xa6, 0x8a, 
  0xf1, 0x09, 0x0d, 0x89, 0x91, 0x66, 0x76, 0x92, 0xeb, 0x88, 0x46, 0xfe, 
  0xd3, 0x6e, 0xee, 0x58, 0x40, 0x6c, 0xb6, 0x13, 0xac, 0xa4, 0x0b, 0xb1, 
  0xa1, 0x7f, 0x3c, 0x8b, 0x54, 0x33, 0x34, 0x5b, 0xb0, 0xbf, 0xd0, 0x93, 
  0x73, 0x4a, 0x70, 0xbc, 0x43, 0xdf, 0x4c, 0xdd, 0x37, 0xba, 0xd2, 0xff, 
  0xf8, 0xe2, 0xa3, 0x3d, 0x80, 0x20, 0x2d, 0x1a, 0x05, 0x11, 0x5c, 0x06, 
  0xb8, 0x21, 0x96, 0x8f, 0xfa, 0xb3, 0x12, 0x7c, 0xd6, 0xda, 0x4f, 0xfd, 
  0x25, 0x9b, 0x6a, 0x56
]

flag_enc = data[0:25]

flag_enc2 = []
for i in reversed(flag_enc):
    flag_enc2.append(i)

xor_to = data[32:32+256]
what = data[288:288+256]

def ROL(data, shift, size=32):
    shift %= size
    remains = data >> (size - shift)
    body = (data << shift) - (remains << size )
    return (body + remains)
    

def ROR(data, shift, size=32):
    shift %= size
    body = data >> shift
    remains = (data << (size - shift)) - (body << size)
    return (body + remains)

for i in range(255, -1, -1):
    bidx = i % 25
    d = what.index(flag_enc2[bidx])
    e = i & 7
    f = (8 - i) % 8
    if i % 2 == 1:
        d = ROL(d, f, 8)
    else:
        d = ROR(d, f, 8)
    flag_enc2[bidx] = d ^ xor_to[i]

for i in flag_enc2:
    print(chr(i), end='')